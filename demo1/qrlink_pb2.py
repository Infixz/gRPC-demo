# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: qrlink.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import service as _service
from google.protobuf import service_reflection
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='qrlink.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\x0cqrlink.proto\"?\n\rQrLinkRequest\x12\x0e\n\x06tmp_ac\x18\x01 \x01(\t\x12\x0e\n\x06h_name\x18\x02 \x01(\t\x12\x0e\n\x06\x63_name\x18\x03 \x01(\t\".\n\x0bQrLinkReply\x12\x0e\n\x06status\x18\x01 \x01(\x08\x12\x0f\n\x07qr_link\x18\x02 \x01(\t2k\n\x06QrLink\x12\x30\n\x0eGetlimitQrLink\x12\x0e.QrLinkRequest\x1a\x0c.QrLinkReply\"\x00\x12/\n\rGetTempQrLink\x12\x0e.QrLinkRequest\x1a\x0c.QrLinkReply\"\x00\x42\x03\x90\x01\x01\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_QRLINKREQUEST = _descriptor.Descriptor(
  name='QrLinkRequest',
  full_name='QrLinkRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='tmp_ac', full_name='QrLinkRequest.tmp_ac', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='h_name', full_name='QrLinkRequest.h_name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='c_name', full_name='QrLinkRequest.c_name', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=16,
  serialized_end=79,
)


_QRLINKREPLY = _descriptor.Descriptor(
  name='QrLinkReply',
  full_name='QrLinkReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='QrLinkReply.status', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='qr_link', full_name='QrLinkReply.qr_link', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=81,
  serialized_end=127,
)

DESCRIPTOR.message_types_by_name['QrLinkRequest'] = _QRLINKREQUEST
DESCRIPTOR.message_types_by_name['QrLinkReply'] = _QRLINKREPLY

QrLinkRequest = _reflection.GeneratedProtocolMessageType('QrLinkRequest', (_message.Message,), dict(
  DESCRIPTOR = _QRLINKREQUEST,
  __module__ = 'qrlink_pb2'
  # @@protoc_insertion_point(class_scope:QrLinkRequest)
  ))
_sym_db.RegisterMessage(QrLinkRequest)

QrLinkReply = _reflection.GeneratedProtocolMessageType('QrLinkReply', (_message.Message,), dict(
  DESCRIPTOR = _QRLINKREPLY,
  __module__ = 'qrlink_pb2'
  # @@protoc_insertion_point(class_scope:QrLinkReply)
  ))
_sym_db.RegisterMessage(QrLinkReply)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\220\001\001'))

_QRLINK = _descriptor.ServiceDescriptor(
  name='QrLink',
  full_name='QrLink',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=129,
  serialized_end=236,
  methods=[
  _descriptor.MethodDescriptor(
    name='GetlimitQrLink',
    full_name='QrLink.GetlimitQrLink',
    index=0,
    containing_service=None,
    input_type=_QRLINKREQUEST,
    output_type=_QRLINKREPLY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='GetTempQrLink',
    full_name='QrLink.GetTempQrLink',
    index=1,
    containing_service=None,
    input_type=_QRLINKREQUEST,
    output_type=_QRLINKREPLY,
    options=None,
  ),
])

QrLink = service_reflection.GeneratedServiceType('QrLink', (_service.Service,), dict(
  DESCRIPTOR = _QRLINK,
  __module__ = 'qrlink_pb2'
  ))

QrLink_Stub = service_reflection.GeneratedServiceStubType('QrLink_Stub', (QrLink,), dict(
  DESCRIPTOR = _QRLINK,
  __module__ = 'qrlink_pb2'
  ))


import abc
from grpc.early_adopter import implementations
from grpc.framework.alpha import utilities
class EarlyAdopterQrLinkServicer(object):
  """QrLink_Servicer"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def GetlimitQrLink(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def GetTempQrLink(self, request, context):
    raise NotImplementedError()
class EarlyAdopterQrLinkServer(object):
  """<QrLink_Server>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def start(self):
    raise NotImplementedError()
  @abc.abstractmethod
  def stop(self):
    raise NotImplementedError()
class EarlyAdopterQrLinkStub(object):
  """<QrLink_Stub>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def GetlimitQrLink(self, request):
    raise NotImplementedError()
  GetlimitQrLink.async = None
  @abc.abstractmethod
  def GetTempQrLink(self, request):
    raise NotImplementedError()
  GetTempQrLink.async = None
def early_adopter_create_QrLink_server(servicer, port, private_key=None, certificate_chain=None):
  import qrlink_pb2
  import qrlink_pb2
  import qrlink_pb2
  import qrlink_pb2
  method_service_descriptions = {
    "GetTempQrLink": utilities.unary_unary_service_description(
      servicer.GetTempQrLink,
      qrlink_pb2.QrLinkRequest.FromString,
      qrlink_pb2.QrLinkReply.SerializeToString,
    ),
    "GetlimitQrLink": utilities.unary_unary_service_description(
      servicer.GetlimitQrLink,
      qrlink_pb2.QrLinkRequest.FromString,
      qrlink_pb2.QrLinkReply.SerializeToString,
    ),
  }
  return implementations.server("QrLink", method_service_descriptions, port, private_key=private_key, certificate_chain=certificate_chain)
def early_adopter_create_QrLink_stub(host, port, metadata_transformer=None, secure=False, root_certificates=None, private_key=None, certificate_chain=None, server_host_override=None):
  import qrlink_pb2
  import qrlink_pb2
  import qrlink_pb2
  import qrlink_pb2
  method_invocation_descriptions = {
    "GetTempQrLink": utilities.unary_unary_invocation_description(
      qrlink_pb2.QrLinkRequest.SerializeToString,
      qrlink_pb2.QrLinkReply.FromString,
    ),
    "GetlimitQrLink": utilities.unary_unary_invocation_description(
      qrlink_pb2.QrLinkRequest.SerializeToString,
      qrlink_pb2.QrLinkReply.FromString,
    ),
  }
  return implementations.stub("QrLink", method_invocation_descriptions, host, port, metadata_transformer=metadata_transformer, secure=secure, root_certificates=root_certificates, private_key=private_key, certificate_chain=certificate_chain, server_host_override=server_host_override)
# @@protoc_insertion_point(module_scope)
